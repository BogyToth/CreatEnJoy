#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CreatEnJoy.Models.DBObjects
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="forummembership")]
	public partial class ForumMembershipModelsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategoryMember(CategoryMember instance);
    partial void UpdateCategoryMember(CategoryMember instance);
    partial void DeleteCategoryMember(CategoryMember instance);
    partial void InsertMember(Member instance);
    partial void UpdateMember(Member instance);
    partial void DeleteMember(Member instance);
    partial void InsertCategoryPost(CategoryPost instance);
    partial void UpdateCategoryPost(CategoryPost instance);
    partial void DeleteCategoryPost(CategoryPost instance);
    partial void InsertPost(Post instance);
    partial void UpdatePost(Post instance);
    partial void DeletePost(Post instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    #endregion
		
		public ForumMembershipModelsDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["forummembershipConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ForumMembershipModelsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ForumMembershipModelsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ForumMembershipModelsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ForumMembershipModelsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CategoryMember> CategoryMembers
		{
			get
			{
				return this.GetTable<CategoryMember>();
			}
		}
		
		public System.Data.Linq.Table<Member> Members
		{
			get
			{
				return this.GetTable<Member>();
			}
		}
		
		public System.Data.Linq.Table<CategoryPost> CategoryPosts
		{
			get
			{
				return this.GetTable<CategoryPost>();
			}
		}
		
		public System.Data.Linq.Table<Post> Posts
		{
			get
			{
				return this.GetTable<Post>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryMembers")]
	public partial class CategoryMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IDCategoryMember;
		
		private System.Guid _IDMember;
		
		private System.Guid _IDCategory;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCategoryMemberChanging(System.Guid value);
    partial void OnIDCategoryMemberChanged();
    partial void OnIDMemberChanging(System.Guid value);
    partial void OnIDMemberChanged();
    partial void OnIDCategoryChanging(System.Guid value);
    partial void OnIDCategoryChanged();
    #endregion
		
		public CategoryMember()
		{
			this._Member = default(EntityRef<Member>);
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCategoryMember", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IDCategoryMember
		{
			get
			{
				return this._IDCategoryMember;
			}
			set
			{
				if ((this._IDCategoryMember != value))
				{
					this.OnIDCategoryMemberChanging(value);
					this.SendPropertyChanging();
					this._IDCategoryMember = value;
					this.SendPropertyChanged("IDCategoryMember");
					this.OnIDCategoryMemberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMember", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDMember
		{
			get
			{
				return this._IDMember;
			}
			set
			{
				if ((this._IDMember != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDMemberChanging(value);
					this.SendPropertyChanging();
					this._IDMember = value;
					this.SendPropertyChanged("IDMember");
					this.OnIDMemberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCategory", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDCategory
		{
			get
			{
				return this._IDCategory;
			}
			set
			{
				if ((this._IDCategory != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCategoryChanging(value);
					this.SendPropertyChanging();
					this._IDCategory = value;
					this.SendPropertyChanged("IDCategory");
					this.OnIDCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_CategoryMember", Storage="_Member", ThisKey="IDMember", OtherKey="IDMember", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.CategoryMembers.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.CategoryMembers.Add(this);
						this._IDMember = value.IDMember;
					}
					else
					{
						this._IDMember = default(System.Guid);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CategoryMember", Storage="_Category", ThisKey="IDCategory", OtherKey="IDCategory", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.CategoryMembers.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.CategoryMembers.Add(this);
						this._IDCategory = value.IDCategory;
					}
					else
					{
						this._IDCategory = default(System.Guid);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Members")]
	public partial class Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IDMember;
		
		private string _Username;
		
		private string _Description;
		
		private string _Title;
		
		private EntitySet<CategoryMember> _CategoryMembers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDMemberChanging(System.Guid value);
    partial void OnIDMemberChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Member()
		{
			this._CategoryMembers = new EntitySet<CategoryMember>(new Action<CategoryMember>(this.attach_CategoryMembers), new Action<CategoryMember>(this.detach_CategoryMembers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMember", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IDMember
		{
			get
			{
				return this._IDMember;
			}
			set
			{
				if ((this._IDMember != value))
				{
					this.OnIDMemberChanging(value);
					this.SendPropertyChanging();
					this._IDMember = value;
					this.SendPropertyChanged("IDMember");
					this.OnIDMemberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(1000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_CategoryMember", Storage="_CategoryMembers", ThisKey="IDMember", OtherKey="IDMember")]
		public EntitySet<CategoryMember> CategoryMembers
		{
			get
			{
				return this._CategoryMembers;
			}
			set
			{
				this._CategoryMembers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CategoryMembers(CategoryMember entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_CategoryMembers(CategoryMember entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryPosts")]
	public partial class CategoryPost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IDCategoryPost;
		
		private System.Guid _IDCategory;
		
		private System.Guid _IDPost;
		
		private EntityRef<Post> _Post;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCategoryPostChanging(System.Guid value);
    partial void OnIDCategoryPostChanged();
    partial void OnIDCategoryChanging(System.Guid value);
    partial void OnIDCategoryChanged();
    partial void OnIDPostChanging(System.Guid value);
    partial void OnIDPostChanged();
    #endregion
		
		public CategoryPost()
		{
			this._Post = default(EntityRef<Post>);
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCategoryPost", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IDCategoryPost
		{
			get
			{
				return this._IDCategoryPost;
			}
			set
			{
				if ((this._IDCategoryPost != value))
				{
					this.OnIDCategoryPostChanging(value);
					this.SendPropertyChanging();
					this._IDCategoryPost = value;
					this.SendPropertyChanged("IDCategoryPost");
					this.OnIDCategoryPostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCategory", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDCategory
		{
			get
			{
				return this._IDCategory;
			}
			set
			{
				if ((this._IDCategory != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCategoryChanging(value);
					this.SendPropertyChanging();
					this._IDCategory = value;
					this.SendPropertyChanged("IDCategory");
					this.OnIDCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPost", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDPost
		{
			get
			{
				return this._IDPost;
			}
			set
			{
				if ((this._IDPost != value))
				{
					if (this._Post.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPostChanging(value);
					this.SendPropertyChanging();
					this._IDPost = value;
					this.SendPropertyChanged("IDPost");
					this.OnIDPostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_CategoryPost", Storage="_Post", ThisKey="IDPost", OtherKey="IDPost", IsForeignKey=true)]
		public Post Post
		{
			get
			{
				return this._Post.Entity;
			}
			set
			{
				Post previousValue = this._Post.Entity;
				if (((previousValue != value) 
							|| (this._Post.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Post.Entity = null;
						previousValue.CategoryPosts.Remove(this);
					}
					this._Post.Entity = value;
					if ((value != null))
					{
						value.CategoryPosts.Add(this);
						this._IDPost = value.IDPost;
					}
					else
					{
						this._IDPost = default(System.Guid);
					}
					this.SendPropertyChanged("Post");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CategoryPost", Storage="_Category", ThisKey="IDCategory", OtherKey="IDCategory", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.CategoryPosts.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.CategoryPosts.Add(this);
						this._IDCategory = value.IDCategory;
					}
					else
					{
						this._IDCategory = default(System.Guid);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Posts")]
	public partial class Post : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IDPost;
		
		private string _Subject;
		
		private string _Description;
		
		private System.DateTime _PostDate;
		
		private System.Nullable<System.Guid> _IDCategory;
		
		private EntitySet<CategoryPost> _CategoryPosts;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDPostChanging(System.Guid value);
    partial void OnIDPostChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPostDateChanging(System.DateTime value);
    partial void OnPostDateChanged();
    partial void OnIDCategoryChanging(System.Nullable<System.Guid> value);
    partial void OnIDCategoryChanged();
    #endregion
		
		public Post()
		{
			this._CategoryPosts = new EntitySet<CategoryPost>(new Action<CategoryPost>(this.attach_CategoryPosts), new Action<CategoryPost>(this.detach_CategoryPosts));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPost", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IDPost
		{
			get
			{
				return this._IDPost;
			}
			set
			{
				if ((this._IDPost != value))
				{
					this.OnIDPostChanging(value);
					this.SendPropertyChanging();
					this._IDPost = value;
					this.SendPropertyChanged("IDPost");
					this.OnIDPostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostDate", DbType="DateTime NOT NULL")]
		public System.DateTime PostDate
		{
			get
			{
				return this._PostDate;
			}
			set
			{
				if ((this._PostDate != value))
				{
					this.OnPostDateChanging(value);
					this.SendPropertyChanging();
					this._PostDate = value;
					this.SendPropertyChanged("PostDate");
					this.OnPostDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCategory", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IDCategory
		{
			get
			{
				return this._IDCategory;
			}
			set
			{
				if ((this._IDCategory != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCategoryChanging(value);
					this.SendPropertyChanging();
					this._IDCategory = value;
					this.SendPropertyChanged("IDCategory");
					this.OnIDCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_CategoryPost", Storage="_CategoryPosts", ThisKey="IDPost", OtherKey="IDPost")]
		public EntitySet<CategoryPost> CategoryPosts
		{
			get
			{
				return this._CategoryPosts;
			}
			set
			{
				this._CategoryPosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Post", Storage="_Category", ThisKey="IDCategory", OtherKey="IDCategory", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._IDCategory = value.IDCategory;
					}
					else
					{
						this._IDCategory = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CategoryPosts(CategoryPost entity)
		{
			this.SendPropertyChanging();
			entity.Post = this;
		}
		
		private void detach_CategoryPosts(CategoryPost entity)
		{
			this.SendPropertyChanging();
			entity.Post = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IDCategory;
		
		private string _Name;
		
		private string _Description;
		
		private decimal _NumberPosts;
		
		private string _ImageURL;
		
		private EntitySet<CategoryMember> _CategoryMembers;
		
		private EntitySet<CategoryPost> _CategoryPosts;
		
		private EntitySet<Post> _Posts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCategoryChanging(System.Guid value);
    partial void OnIDCategoryChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnNumberPostsChanging(decimal value);
    partial void OnNumberPostsChanged();
    partial void OnImageURLChanging(string value);
    partial void OnImageURLChanged();
    #endregion
		
		public Category()
		{
			this._CategoryMembers = new EntitySet<CategoryMember>(new Action<CategoryMember>(this.attach_CategoryMembers), new Action<CategoryMember>(this.detach_CategoryMembers));
			this._CategoryPosts = new EntitySet<CategoryPost>(new Action<CategoryPost>(this.attach_CategoryPosts), new Action<CategoryPost>(this.detach_CategoryPosts));
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCategory", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IDCategory
		{
			get
			{
				return this._IDCategory;
			}
			set
			{
				if ((this._IDCategory != value))
				{
					this.OnIDCategoryChanging(value);
					this.SendPropertyChanging();
					this._IDCategory = value;
					this.SendPropertyChanged("IDCategory");
					this.OnIDCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberPosts", DbType="Decimal(18,0) NOT NULL")]
		public decimal NumberPosts
		{
			get
			{
				return this._NumberPosts;
			}
			set
			{
				if ((this._NumberPosts != value))
				{
					this.OnNumberPostsChanging(value);
					this.SendPropertyChanging();
					this._NumberPosts = value;
					this.SendPropertyChanged("NumberPosts");
					this.OnNumberPostsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageURL", DbType="NVarChar(100)")]
		public string ImageURL
		{
			get
			{
				return this._ImageURL;
			}
			set
			{
				if ((this._ImageURL != value))
				{
					this.OnImageURLChanging(value);
					this.SendPropertyChanging();
					this._ImageURL = value;
					this.SendPropertyChanged("ImageURL");
					this.OnImageURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CategoryMember", Storage="_CategoryMembers", ThisKey="IDCategory", OtherKey="IDCategory")]
		public EntitySet<CategoryMember> CategoryMembers
		{
			get
			{
				return this._CategoryMembers;
			}
			set
			{
				this._CategoryMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CategoryPost", Storage="_CategoryPosts", ThisKey="IDCategory", OtherKey="IDCategory")]
		public EntitySet<CategoryPost> CategoryPosts
		{
			get
			{
				return this._CategoryPosts;
			}
			set
			{
				this._CategoryPosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Post", Storage="_Posts", ThisKey="IDCategory", OtherKey="IDCategory")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CategoryMembers(CategoryMember entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_CategoryMembers(CategoryMember entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_CategoryPosts(CategoryPost entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_CategoryPosts(CategoryPost entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
}
#pragma warning restore 1591
